package com.striveonger.common.core;

import cn.hutool.crypto.asymmetric.KeyType;
import cn.hutool.crypto.asymmetric.RSA;

/**
 * @author Mr.Lee
 * @since 2024-11-13 23:48
 */
public class RsaKit {

    private static final String CA_PUBLIC = "30819F300D06092A864886F70D010101050003818D0030818902818100DD4F2C013282904AAF7A696649F7158109C8B5D30F6BF1E30E7BA2F817E7B04718B184A31FC20BE4BC2DAD2A23326BB015232E5E2D78B2EA40AFB46B93C33F98E1FE10158686EA6C5E5F3E4DD72E91ACCE26ACE3EDA56CD9F151B953ED0FCD1B8AE1A5DE5837C9318269B5C197739E64D21F93CEAB8B7842A9B697EAC805F9430203010001";
    private static final String

    /**
     * 加密(默认CA公钥加密)
     * @param str
     * @return
     */
    public static String encrypt(String str) {
        return publicKeyEncrypt(str, CA_PUBLIC);
    }

    /**
     * 解密(默认CA私钥解密)
     * @param str
     * @return
     */
    public static String decrypt(String str) {
        return privateKeyDecrypt(str, CA_PRIVATE);
    }

    /**
     * 公钥加密
     * @param str
     * @param publicKey
     * @return
     */
    public static String publicKeyEncrypt(String str, String publicKey) {
        RSA rsa = new RSA(null, publicKey);
        return rsa.encryptBase64(str, KeyType.PublicKey);
    }

    /**
     * 私钥解密
     * @param str
     * @param privateKey
     * @return
     */
    public static String privateKeyDecrypt(String str, String privateKey) {
        RSA rsa = new RSA(privateKey, null);
        return rsa.decryptStr(str, KeyType.PrivateKey);
    }

    /**
     * 私钥加密
     * @param str
     * @param privateKey
     * @return
     */
    public static String privateKeyEncrypt(String str, String privateKey) {
        RSA rsa = new RSA(privateKey, null);
        return rsa.encryptBase64(str, KeyType.PrivateKey);
    }

    /**
     * 公钥解密
     * @param str
     * @param publicKey
     * @return
     */
    public static String publicKeyDecrypt(String str, String publicKey) {
        RSA rsa = new RSA(null, publicKey);
        return rsa.decryptStr(str, KeyType.PublicKey);
    }

}
